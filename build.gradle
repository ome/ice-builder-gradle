//
// Copyright (c) ZeroC, Inc. All rights reserved.
//

buildscript {
    if(!localOnly.toBoolean()) {
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
        dependencies {
            classpath "com.gradle.publish:plugin-publish-plugin:0.9.9"
        }
    }
}

if(!localOnly.toBoolean()) {
    apply plugin: "com.gradle.plugin-publish"
}

apply plugin: 'groovy'
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7

if(!localOnly.toBoolean()) {
    repositories {
        mavenCentral()
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    if(!localOnly.toBoolean()) {
        testCompile 'junit:junit:4.12'
        testCompile 'com.github.stefanbirkner:system-rules:1.16.0'
    }
}

test {
    testLogging {
        events = ["failed", "skipped"]
        exceptionFormat = "full"
        showStandardStreams = false
    }
    onlyIf { ! localOnly.toBoolean() }
}

sourceSets {
    main {
        groovy {
            srcDir "src/main/groovy"
        }
        resources {
            srcDir "src/main/resources"
        }
    }
}

version  = "1.4.7"
group = "com.zeroc.gradle.ice-builder"

if(!localOnly.toBoolean()) {
    pluginBundle {
        website = 'https://github.com/zeroc-ice/ice-builder-gradle'
        vcsUrl = 'https://github.com/zeroc-ice/ice-builder-gradle.git'
        description = 'Plugin to automate the compilation of Slice files to Java'
        tags = ['zeroc', 'ice', 'slice']

        plugins {
            slicePlugin {
                id = 'com.zeroc.gradle.ice-builder.slice'
                displayName = 'Ice Builder for Gradle'
            }
        }
    }

    //
    // Used to build the gradle wrapper to automatically download and install
    // the version of gradle needed to build plugin.
    //
//    task wrapper(type: Wrapper) {
//        gradleVersion = "4.4"
//    }
} else {
    prefix = prefix ? prefix : (System.properties['os.name'].toLowerCase().contains('windows') ?
        "C:\\ice-builder-gradle-${project.version}" : "/opt/ice-builder-gradle-${project.version}")

    def jarDir = (prefix == "/usr" || prefix == "/usr/local") ? "${prefix}/share/java" : "${prefix}/lib"

    def pomName = "$buildDir/libs/${project.name}-${project.version}.pom"
    def pomLicense = project.hasProperty("licenseURL") ? licenseURL : "https://github.com/zeroc-ice/ice-builder-gradle/blob/master/LICENSE"

    task writeNewPom << {

        pom {
            project {
                name 'Ice Builder for Gradle'
                description 'Plugin to automate the compilation of Slice files to Java'
                url 'https://zeroc.com'
                scm {
                    connection 'scm:git:git@github.com/zeroc-ice/ice-builder-gradle.git'
                    developerConnection 'scm:git:git@github.com/zeroc-ice/ice-builder-gradle.git'
                    url 'git://github.com/zeroc-ice/ice-builder-gradle.git'
                }
                licenses {
                    license {
                        name 'The BSD 3-Clause License'
                        url pomLicense
                        distribution 'repo'
                    }
                }
                organization {
                    name 'ZeroC, Inc.'
                    url 'https://zeroc.com'
                }
                developers {
                    developer {
                        name = 'ZeroC Developers'
                        email = 'info@zeroc.com'
                        organization = 'ZeroC, Inc.'
                        organizationUrl = 'https://zeroc.com'
                    }
                }
            }
        }.writeTo(pomName)
    }

    jar.dependsOn(writeNewPom)

    task groovydocJar(type: Jar, dependsOn: groovydoc) {
        classifier = 'groovydoc'
        from groovydoc
        destinationDir = new File("$buildDir/libs")
    }

    assemble.dependsOn(groovydocJar)

    task sourcesJar(type: Jar, dependsOn: jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        destinationDir = new File("$buildDir/libs")
    }
    assemble.dependsOn(sourcesJar)

    task install(type: Copy, dependsOn: assemble, overwrite: true) {
        from "${pomName}"
        from "$buildDir/libs/${jar.archiveName}"
        from "$buildDir/libs/${project.name}-${project.version}-sources.jar"
        from "$buildDir/libs/${project.name}-${project.version}-groovydoc.jar"
        into "${DESTDIR}${jarDir}"
    }
}
